import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta

# Upload file CSV
st.title("üìä DASHBOARD")
uploaded_file = st.file_uploader("Select file:", type=["csv"])

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)

    if "time" in df.columns:
        df["time"] = pd.to_datetime(df["time"], errors="coerce", utc=True)
        df["time"] = df["time"].dt.tz_convert("Asia/Ho_Chi_Minh")

        first_features = [col for col in df.columns if "First" in col]

        if not first_features:
            st.error("‚ùå Kh√¥ng t√¨m th·∫•y thu·ªôc t√≠nh n√†o c√≥ 'First'")
        else:
            show_full = st.checkbox("Hi·ªÉn th·ªã to√†n b·ªô d·ªØ li·ªáu", value=False)
            if show_full:
                st.dataframe(df)
            else:
                st.dataframe(df.head(1000))

            st.subheader("‚è∞ Ch·ªçn m·ªëc th·ªùi gian")
            option = st.radio("Ch·∫ø ƒë·ªô ch·ªçn:", ["T·∫•t c·∫£", "Ch·ªçn theo m·ªëc th·ªùi gian"])

            if option == "Ch·ªçn theo m·ªëc th·ªùi gian":
                date_selected = st.date_input("Ch·ªçn ng√†y", df["time"].min().date())

                time_text = st.text_input("Nh·∫≠p gi·ªù ph√∫t gi√¢y (HH:MM:SS):", "")

                selected_time = None
                if time_text.strip():
                    try:
                        time_selected = datetime.strptime(time_text, "%H:%M:%S").time()
                        selected_time = datetime.combine(date_selected, time_selected)
                        selected_time = pd.to_datetime(selected_time).tz_localize("Asia/Ho_Chi_Minh")
                    except ValueError:
                        st.error("‚ö†Ô∏è ƒê·ªãnh d·∫°ng gi·ªù ph√∫t gi√¢y kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p theo HH:MM:SS")

                minutes = st.number_input(
                    "Nh·∫≠p s·ªë ph√∫t (-1 ƒë·ªÉ l·∫•y t·∫•t c·∫£):",
                    min_value=-1, max_value=10000, value=200, step=100
                )

                if selected_time is not None:
                    if minutes == -1:
                        df_filtered = df.copy()
                    else:
                        start_time = selected_time - timedelta(minutes=minutes)
                        df_filtered = df[(df["time"] >= start_time) & (df["time"] <= selected_time)]
                else:
                    df_filtered = pd.DataFrame()
            else:
                df_filtered = df.copy()

            st.subheader("üîé Ch·ªçn th√¥ng s·ªë ƒë·ªÉ quan s√°t")
            center_feature = st.selectbox("Ch·ªçn th√¥ng s·ªë trung t√¢m:", first_features)
            other_features = st.multiselect(
                "Ch·ªçn c√°c th√¥ng s·ªë kh√°c:",
                [f for f in first_features if f != center_feature]
            )

            selected_features = [center_feature] + other_features

            if not df_filtered.empty:
                st.subheader("üìà Bi·ªÉu ƒë·ªì d·ªØ li·ªáu")

                for col in selected_features:
                    fig = px.line(df_filtered, x="time", y=col, title=f"Bi·ªÉu ƒë·ªì {col}")
                    fig.update_traces(
                        mode="lines+markers",
                        hovertemplate="Th·ªùi gian=%{x|%Y-%m-%d %H:%M:%S}<br>Gi√° tr·ªã=%{y}"
                    )
                    fig.update_layout(xaxis_title="Th·ªùi gian", yaxis_title=col)
                    st.plotly_chart(fig, use_container_width=True)

            else:
                st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu trong kho·∫£ng th·ªùi gian n√†y!")
    else:
        st.error("‚ùå File kh√¥ng c√≥ c·ªôt 'time'")
